// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.rockthejvm.protos.orders


object OrderGrpc {
  val METHOD_SEND_ORDER_STREAM: _root_.io.grpc.MethodDescriptor[com.rockthejvm.protos.orders.OrderRequest, com.rockthejvm.protos.orders.OrderReply] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("com.rockthejvm.protos.Order", "SendOrderStream"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.rockthejvm.protos.orders.OrderRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.rockthejvm.protos.orders.OrderReply])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.rockthejvm.protos.orders.OrdersProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("com.rockthejvm.protos.Order")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(com.rockthejvm.protos.orders.OrdersProto.javaDescriptor))
      .addMethod(METHOD_SEND_ORDER_STREAM)
      .build()
  
  trait Order extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = Order
    def sendOrderStream(responseObserver: _root_.io.grpc.stub.StreamObserver[com.rockthejvm.protos.orders.OrderReply]): _root_.io.grpc.stub.StreamObserver[com.rockthejvm.protos.orders.OrderRequest]
  }
  
  object Order extends _root_.scalapb.grpc.ServiceCompanion[Order] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[Order] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = com.rockthejvm.protos.orders.OrdersProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = com.rockthejvm.protos.orders.OrdersProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: Order, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_SEND_ORDER_STREAM,
        _root_.io.grpc.stub.ServerCalls.asyncBidiStreamingCall((observer: _root_.io.grpc.stub.StreamObserver[com.rockthejvm.protos.orders.OrderReply]) => {
          serviceImpl.sendOrderStream(observer)
        }))
      .build()
  }
  
  trait OrderBlockingClient {
    def serviceCompanion = Order
  }
  
  class OrderBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[OrderBlockingStub](channel, options) with OrderBlockingClient {
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): OrderBlockingStub = new OrderBlockingStub(channel, options)
  }
  
  class OrderStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[OrderStub](channel, options) with Order {
    override def sendOrderStream(responseObserver: _root_.io.grpc.stub.StreamObserver[com.rockthejvm.protos.orders.OrderReply]): _root_.io.grpc.stub.StreamObserver[com.rockthejvm.protos.orders.OrderRequest] = {
      _root_.scalapb.grpc.ClientCalls.asyncBidiStreamingCall(channel, METHOD_SEND_ORDER_STREAM, options, responseObserver)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): OrderStub = new OrderStub(channel, options)
  }
  
  object OrderStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[OrderStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): OrderStub = new OrderStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[OrderStub] = this
  }
  
  def bindService(serviceImpl: Order, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = Order.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): OrderBlockingStub = new OrderBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): OrderStub = new OrderStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = com.rockthejvm.protos.orders.OrdersProto.javaDescriptor.getServices().get(0)
  
}